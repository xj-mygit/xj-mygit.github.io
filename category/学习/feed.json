{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"学习\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/12/dc9a13a0036c.html",
            "url": "http://example.com/2023/12/dc9a13a0036c.html",
            "title": "",
            "date_published": "2023-12-14T09:41:53.286Z",
            "content_html": "<h1 id=\"explain\"><a class=\"markdownIt-Anchor\" href=\"#explain\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL3VzaW5nLWV4cGxhaW4uaHRtbA==\">Explain</span> 简介</h1>\n<p>Explain 语句提供了有关<mark> Mysql 语句如何执行的信息</mark></p>\n<ul>\n<li>Explain 适用于 select、update、insert、delete 语句。</li>\n<li>Explain 和可适用的语句一起执行时，MySQL 会展示可适用语句的执行计划的信息。也就是 MySQL 解释了它将<mark>如何处理该语句</mark>，包括有关<mark>表如何连接以及连接顺序的信息</mark>。\n<ul>\n<li>示例：```explain select * from  users;</li>\n</ul>\n</li>\n<li>当与可解释语句一起 Explain 使用 时，它显示在指定连接中执行的语句的执行计划</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/11/a9b903c46827.html",
            "url": "http://example.com/2023/11/a9b903c46827.html",
            "title": "基础",
            "date_published": "2023-11-14T11:57:10.000Z",
            "content_html": "<h1 id=\"docker简介\"><a class=\"markdownIt-Anchor\" href=\"#docker简介\">#</a> Docker 简介</h1>\n<h2 id=\"docker生成背景\"><a class=\"markdownIt-Anchor\" href=\"#docker生成背景\">#</a> Docker 生成背景</h2>\n<ol>\n<li>由于各种配置、开发环境的不同（例如各种版本不一致的问题，mysql、java、redis 等），导致了不同人员使用系统时的各种问题。</li>\n<li>换一台机器就要重新部署一遍，费时费力<br>\n由此衍生出 Docker —— <mark>系统平滑移植，容器虚拟化计划</mark><br>\n Docker 解决了：通过将环境复制到 Docker，解决了我的代码只能在我自己电脑上正常工作的问题。<br>\n![[image/Pasted image 20231114193806.png]]</li>\n</ol>\n<h2 id=\"docker-理念\"><a class=\"markdownIt-Anchor\" href=\"#docker-理念\">#</a> Docker 理念</h2>\n<p><mark>一次镜像，处处运行</mark><br>\n<strong> Docker 是基于 Go 语言实现的开源项目</strong><br>\n Docker 主要目标是：Build、Ship And Run Any App，Anywhere；通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的 App（可以是一个 Web 应用或者数据库应用）及其运行环境做到一次镜像，处处运行。</p>\n<p><mark>Linux 容器技术</mark>出现解决了这样一个问题，<mark>Docker 是基于此发展出来的</mark>。</p>\n<p>解决了：运行环境和配置问题的软件容器，方便做持续集成有助于整体发布的容器虚拟话技术。</p>\n<h2 id=\"容器与虚拟机的区别\"><a class=\"markdownIt-Anchor\" href=\"#容器与虚拟机的区别\">#</a> 容器与虚拟机的区别</h2>\n<ul>\n<li>虚拟机是将操作系统的所有东西全部搬过来。</li>\n<li>容器是将每一个进程所需的资源以及配置搬过来。</li>\n<li>举例：以搬家举例子：\n<ul>\n<li>虚拟机就如同是将整栋楼房都保持原样的搬过去。</li>\n<li>容器就如同是只将某样东西在新家的基础上搬过去。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>容器的发展</p>\n</blockquote>\n<p>光盘 - 卡带 - 虚拟机 - 容器</p>\n<blockquote>\n<p>虚拟机</p>\n</blockquote>\n<p>不影响宿主机的运行，而通过 == 宿主机的一个应用程序（虚拟机）== 创建出不同于宿主机的操作系统的多个实例。并在多个实例上安装部署各种应用。<br>\n<strong>缺点</strong>：</p>\n<ol>\n<li>太重了，将整套操作系统的所有内容都搬来，导致资源占用多。</li>\n<li>太慢了。启动到进入系统，所用时间过长。</li>\n<li>步骤多。<br>\n<img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/Docker-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80-01.png\" alt=\"Docker-学习-基础-01.png\"></li>\n</ol>\n<blockquote>\n<p>容器</p>\n</blockquote>\n<ul>\n<li>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</li>\n<li><mark>容器内的应用进程直接运行于宿主的内核</mark>，容器内没有自己的内核且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</li>\n<li><mark>每个容器之间互相隔离，每个容器有自己的文件系统，容器之间进程不会相互影响，能区分计算资源</mark>。</li>\n</ul>\n<p>由于前面虚拟机存在某些缺点，Linux 发展出了另一种虚拟化技术：</p>\n<p>Linux 容器（Linux Containers，缩写为 LXC）</p>\n<p>Linux 容器是与系统其他部分隔离开的一系列进程，从另一个镜像运行，并由<mark>该镜像提供支持进程所需的全部文件</mark>。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有<mark>可移植性和一致性</mark>。</p>\n<p><mark>Linux 容器不是模拟一个完整的操作系统</mark>而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。<mark>容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置</mark>。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。</p>\n<p><img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/Docker.png\" alt=\"\"></p>\n<h2 id=\"docker网站\"><a class=\"markdownIt-Anchor\" href=\"#docker网站\">#</a> Docker 网站</h2>\n<ul>\n<li>Docker 官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS8=\">https://www.docker.com/</span></li>\n<li>Docker 镜像文件的官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\">https://hub.docker.com/</span></li>\n</ul>\n",
            "tags": []
        }
    ]
}