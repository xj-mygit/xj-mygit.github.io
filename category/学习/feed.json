{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"学习\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/01/e1b05e3ef41c.html",
            "url": "http://example.com/2024/01/e1b05e3ef41c.html",
            "title": "",
            "date_published": "2024-01-07T12:39:33.599Z",
            "content_html": "<h1 id=\"帮助启动类命令\"><a class=\"markdownIt-Anchor\" href=\"#帮助启动类命令\">#</a> 帮助启动类命令</h1>\n<p><mark>通过 docker --help 以及 docker 命令 --help 查看 docker 命令的使用。</mark></p>\n<ul>\n<li>启动 Docker：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<ul>\n<li>停止 Docker：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop docker</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重启 Docker</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看 Docker 状态</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status docker</span><br></pre></td></tr></table></figure>\n<ul>\n<li>开机启动 Docker</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看 Docker 概要信息</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker info</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看 Docker 总体帮助文档</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker --help</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看 Docker 命令帮助文档</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker 具体命令 --help</span><br></pre></td></tr></table></figure>\n<h1 id=\"镜像命令\"><a class=\"markdownIt-Anchor\" href=\"#镜像命令\">#</a> 镜像命令</h1>\n<h2 id=\"docker-images\"><a class=\"markdownIt-Anchor\" href=\"#docker-images\">#</a> Docker images</h2>\n<p>列出 ==<strong> 本地主机</strong> == 上的镜像。<br>\nOPTIONS：</p>\n<ul>\n<li>-a：列出所有的镜像 ==（含历史镜像）</li>\n<li>-q：只显示镜像 id</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM-4-8-centos docker]# docker images</span><br><span class=\"line\">REPOSITORY TAG IMAGE ID CREATED SIZE</span><br></pre></td></tr></table></figure>\n<p>字段说明：<br>\nREPOSITORY：镜像的仓库源<br>\n TAG：镜像的标签版本号<br>\n IMAGE ID： 镜像的 ID<br>\nCREATED： 镜像的创建时间<br>\n SIZE：镜像的大小<br>\n同一个仓库源可以有多个 TAG 版本。使用<strong> REPOSITORY:TAG</strong> 可以定义指定版本的仓库源。如<strong>不指定则默认最新</strong>。</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/12/5076ee800a47.html",
            "url": "http://example.com/2023/12/5076ee800a47.html",
            "title": "",
            "date_published": "2023-12-17T11:25:39.120Z",
            "content_html": "<h1 id=\"前提说明\"><a class=\"markdownIt-Anchor\" href=\"#前提说明\">#</a> 前提说明</h1>\n<ul>\n<li>Docker 可以在 MAC、Windows、Linux 系统上安装。</li>\n<li>Docker<mark> 不是一个通用的容器工具</mark>。<mark>依赖于 Liunx 环境</mark>。</li>\n<li>Docker 实质：在 Linux 下，制造了一个隔离的文件环境。执行效率等同于所部署的 Linux 主机。</li>\n<li>安装：具体见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZGVza3RvcC9pbnN0YWxsL21hYy1pbnN0YWxsLw==\">官网</span>\n<ul>\n<li>还可以安装一个 linux 系统的虚拟机然后安装 Docker</li>\n<li><img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/Docker-%E5%9F%BA%E7%A1%80-03.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>检查 liunx 系统内核以及系统的命令：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM-4-8-centos ~]# cat /etc/redhat-release</span><br><span class=\"line\"></span><br><span class=\"line\">CentOS Linux release 7.6.1810 (Core)</span><br><span class=\"line\"></span><br><span class=\"line\">[root@VM-4-8-centos ~]# uname -r</span><br><span class=\"line\"></span><br><span class=\"line\">3.10.0-1160.99.1.el7.x86_64</span><br></pre></td></tr></table></figure>\n<h1 id=\"基本组成-狭义镜像只说明docker\"><a class=\"markdownIt-Anchor\" href=\"#基本组成-狭义镜像只说明docker\">#</a> <strong>基本组成</strong> （狭义镜像只说明 Docker）</h1>\n<h3 id=\"镜像image\"><a class=\"markdownIt-Anchor\" href=\"#镜像image\">#</a> 镜像（image）</h3>\n<ul>\n<li>镜像通俗来说是一个<strong>只读</strong>的模板。一个镜像可以创建多个容器。</li>\n<li>镜像拥有一个完整且最小<strong> root 文件系统</strong>。例如官方的 Centos:7 则是包含了完整的一套 Centos:7 最小 root 文件系统。</li>\n<li>容器的组成部分简单概括为两部分：\n<ul>\n<li>完整且最小的 Linux 系统：提供可以运行的 Linux 环境，只加载 Linux 运行的所需部分。</li>\n<li>应用程序：需要运行的应用程序。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"容器container\"><a class=\"markdownIt-Anchor\" href=\"#容器container\">#</a> 容器（container）</h3>\n<ul>\n<li>容器是镜像内容的实现。</li>\n<li>镜像和容器就如同 Java 中的类和实例。镜像提供了所有可以用的东西。而容器则是可以实际创建出容器内的东西。</li>\n</ul>\n<h3 id=\"仓库repository\"><a class=\"markdownIt-Anchor\" href=\"#仓库repository\">#</a> 仓库（repository）</h3>\n<ul>\n<li>仓库是官方远程<strong>集中存放镜像文件</strong>的场所。</li>\n<li>类似于 Git 仓库。是由各个使用者上传到远程仓库。</li>\n<li>仓库分为<strong>公有</strong> 和<strong>私有</strong>两种类型，最大的公开仓库是 DockerHub。 国内公开仓库有阿里云、网易云等。</li>\n</ul>\n<h3 id=\"原理\"><a class=\"markdownIt-Anchor\" href=\"#原理\">#</a> 原理</h3>\n<ul>\n<li>Docker 在宿主机上会启动一个守护进程。可以通过客户端连接到宿主机对 Docker 做一系列操作。<br>\n<img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/Docker.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"架构图解\"><a class=\"markdownIt-Anchor\" href=\"#架构图解\">#</a> 架构图解</h3>\n<p><img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/Docker-%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"\"></p>\n<h1 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>Docker 的安装分为桌面版和<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZGVza3RvcC8=\">非桌面版</span>。<br>\n非桌面版具体安装：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwv\">官网</span><br>\n这两种方式均有分门别类的安装方式：如桌面版分为 windows、macos、linux；<br>\n非桌面版（引擎）：Centos、debian、fedora 等方式。具体看官网介绍。</p>\n<h2 id=\"centos\"><a class=\"markdownIt-Anchor\" href=\"#centos\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvY2VudG9zLw==\">Centos</span> 安装非桌面版（Docker 引擎）</h2>\n<h3 id=\"1-操作系统要求\"><a class=\"markdownIt-Anchor\" href=\"#1-操作系统要求\">#</a> 1. 操作系统要求</h3>\n<p>操作系统需要在 Centos7 以上。</p>\n<h3 id=\"2-卸载旧版本\"><a class=\"markdownIt-Anchor\" href=\"#2-卸载旧版本\">#</a> 2. 卸载旧版本</h3>\n<pre><code>sudo yum remove docker \\\n              docker-client \\\n              docker-client-latest \\\n              docker-common \\\n              docker-latest \\\n              docker-latest-logrotate \\\n              docker-logrotate \\\n              docker-engine\n</code></pre>\n<p>注意：<mark>卸载 Docker 时，不会删除 /var/lib/docker/ 下存储的镜像、容器、卷、网络</mark></p>\n<h3 id=\"3-安装方法\"><a class=\"markdownIt-Anchor\" href=\"#3-安装方法\">#</a> 3. 安装方法</h3>\n<p>官方提供 3 种方法：设置 Docker 存储库（推荐）、下载 RPM 包手动安装、自动化便捷脚本。这里使用第一种方法。</p>\n<h4 id=\"设置存储库\"><a class=\"markdownIt-Anchor\" href=\"#设置存储库\">#</a> 设置存储库</h4>\n<p>安装 yum-utils 软件包并设置存储库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-安装docker引擎\"><a class=\"markdownIt-Anchor\" href=\"#1-安装docker引擎\">#</a> 1. 安装 Docker 引擎</h4>\n<h5 id=\"安装docker引擎-containerd-dockercompose\"><a class=\"markdownIt-Anchor\" href=\"#安装docker引擎-containerd-dockercompose\">#</a> 安装 Docker 引擎、containerd、DockerCompose</h5>\n<p>最新版：</p>\n   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>\n<p>此命令会安装 Docker，但不会启动 Docker。它还创建一个  <code>docker</code>  组，但是默认情况下不会将任何用户添加到该组。</p>\n<p>具体版本：</p>\n<ol>\n<li>先列出<mark>符合操作系统</mark>且<mark>在存储库中可用</mark>的版本。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\"></span><br><span class=\"line\">docker-ce.x86_64    3:24.0.0-1.el8    docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64    3:23.0.6-1.el8    docker-ce-stable</span><br><span class=\"line\">&lt;...&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>选择自己需要的版本。然后通过完全限定的包名称安装特定版本。通过连字符 &quot;-&quot; 连接包名称和版本字符串。\n<ol>\n<li>包名称：docker-ce.x86_64 取 docker-ce</li>\n<li>版本字符串：3:24.0.0-1.el8</li>\n</ol>\n</li>\n<li>将步骤 2 的完全限定包名称<mark>替换</mark>掉命令行的 &lt;version_string&gt;。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>\n<p>此命令会安装 Docker，但不会启动 Docker。它还创建一个  <code>docker</code>  组，但是默认情况下不会将任何用户添加到该组。</p>\n<h4 id=\"2-启动docker\"><a class=\"markdownIt-Anchor\" href=\"#2-启动docker\">#</a> 2. 启动 Docker</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-验证是否安装成功\"><a class=\"markdownIt-Anchor\" href=\"#3-验证是否安装成功\">#</a> 3. 验证是否安装成功</h4>\n<p>此命令会下载一个 hello-world 镜像并运行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n<p>此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条确认消息并退出</p>\n<h3 id=\"卸载docker\"><a class=\"markdownIt-Anchor\" href=\"#卸载docker\">#</a> 卸载 Docker</h3>\n<ol>\n<li>卸载 Docker Engine、CLI、containerd 和 Docker Compose 软件包：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>主机上的映像、容器、卷或自定义配置文件不会自动删除。要删除所有映像、容器和卷： <figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo <span class=\"built_in\">rm</span> -rf /var/lib/docker</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo <span class=\"built_in\">rm</span> -rf /var/lib/containerd</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>您必须手动删除任何编辑的配置文件。</p>\n<h1 id=\"阿里云镜像加速\"><a class=\"markdownIt-Anchor\" href=\"#阿里云镜像加速\">#</a> 阿里云镜像加速</h1>\n<ol>\n<li>登入阿里云</li>\n<li>产品与服务中找到<strong>镜像容器服务</strong> - &gt; <strong>镜像工具</strong> - &gt; <strong>镜像加速器</strong></li>\n<li>复制加速器地址。</li>\n<li><mark>选择对应的 linux 系统</mark>在 /etc/docker/ 目录下的 daemon.json 文件中配置（下面是 centos 的）。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27; </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;registry-mirrors&quot;: [&quot;https://udxftms9.mirror.aliyuncs.com&quot;] </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">EOF </span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h1 id=\"docker-一些术语的解释\"><a class=\"markdownIt-Anchor\" href=\"#docker-一些术语的解释\">#</a> Docker 一些术语的解释</h1>\n<h2 id=\"docker桌面docker-desktop-和docker引擎docker-engine-docker-ce\"><a class=\"markdownIt-Anchor\" href=\"#docker桌面docker-desktop-和docker引擎docker-engine-docker-ce\">#</a> Docker 桌面 (Docker desktop) 和 Docker 引擎（Docker Engine、Docker ce）</h2>\n<h3 id=\"docker-桌面版\"><a class=\"markdownIt-Anchor\" href=\"#docker-桌面版\">#</a> Docker 桌面版</h3>\n<p>Docker 桌面版是适用于<strong>桌面操作系统的完整 Docker 解决方案</strong>。它提供了一个用户友好的图形界面，使得在桌面上使用 Docker 变得更加简单和直观。<mark>Docker 桌面版包括了 Docker 引擎、Docker CLI（命令行界面）和 Docker Compose 等工具，以及一些附加功能，如图形化容器管理、镜像仓库浏览器、容器日志查看器</mark>等。Docker 桌面版适用于开发人员和系统管理员，可以方便地在桌面上构建、运行和管理容器化应用程序。<br>\n<img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/Docker%E6%A1%8C%E9%9D%A2%E7%89%88%E6%8B%A5%E6%9C%89%E7%9A%84%E6%8F%92%E4%BB%B6.png\" alt=\"\"></p>\n<h3 id=\"docker引擎\"><a class=\"markdownIt-Anchor\" href=\"#docker引擎\">#</a> Docker 引擎</h3>\n<p>==Docker 引擎是 Docker 的核心组件，用于构建和运行容器化应用程序。== 它是一个轻量级的、可移植的容器运行时环境，<mark>适用于服务器和云环境</mark>。Docker 引擎提供了一组命令行工具，如 Docker CLI 和 Docker Compose，用于管理和操作容器。与 Docker 桌面版相比，Docker 引擎更加适用于服务器环境，可以通过命令行界面进行远程管理和自动化操作。</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/11/a9b903c46827.html",
            "url": "http://example.com/2023/11/a9b903c46827.html",
            "title": "基础",
            "date_published": "2023-11-14T11:57:10.000Z",
            "content_html": "<h1 id=\"docker简介\"><a class=\"markdownIt-Anchor\" href=\"#docker简介\">#</a> Docker 简介</h1>\n<h2 id=\"docker生成背景\"><a class=\"markdownIt-Anchor\" href=\"#docker生成背景\">#</a> Docker 生成背景</h2>\n<ol>\n<li>由于各种配置、开发环境的不同（例如各种版本不一致的问题，mysql、java、redis 等），导致了不同人员使用系统时的各种问题。</li>\n<li>换一台机器就要重新部署一遍，费时费力<br>\n由此衍生出 Docker —— <mark>系统平滑移植，容器虚拟化计划</mark><br>\n Docker 解决了：通过将环境复制到 Docker，解决了我的代码只能在我自己电脑上正常工作的问题。<br>\n![[image/Pasted image 20231114193806.png]]</li>\n</ol>\n<h2 id=\"docker-理念\"><a class=\"markdownIt-Anchor\" href=\"#docker-理念\">#</a> Docker 理念</h2>\n<p><mark>一次镜像，处处运行</mark><br>\n<strong> Docker 是基于 Go 语言实现的开源项目</strong><br>\n Docker 主要目标是：Build、Ship And Run Any App，Anywhere；通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的 App（可以是一个 Web 应用或者数据库应用）及其运行环境做到一次镜像，处处运行。</p>\n<p><mark>Linux 容器技术</mark>出现解决了这样一个问题，<mark>Docker 是基于此发展出来的</mark>。</p>\n<p>解决了：运行环境和配置问题的软件容器，方便做持续集成有助于整体发布的容器虚拟话技术。</p>\n<h2 id=\"容器与虚拟机的区别\"><a class=\"markdownIt-Anchor\" href=\"#容器与虚拟机的区别\">#</a> 容器与虚拟机的区别</h2>\n<ul>\n<li>虚拟机是将操作系统的所有东西全部搬过来。</li>\n<li>容器是将每一个进程所需的资源以及配置搬过来。</li>\n<li>举例：以搬家举例子：\n<ul>\n<li>虚拟机就如同是将整栋楼房都保持原样的搬过去。</li>\n<li>容器就如同是只将某样东西在新家的基础上搬过去。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>容器的发展</p>\n</blockquote>\n<p>光盘 - 卡带 - 虚拟机 - 容器</p>\n<blockquote>\n<p>虚拟机</p>\n</blockquote>\n<p>不影响宿主机的运行，而通过 == 宿主机的一个应用程序（虚拟机）== 创建出不同于宿主机的操作系统的多个实例。并在多个实例上安装部署各种应用。<br>\n<strong>缺点</strong>：</p>\n<ol>\n<li>太重了，将整套操作系统的所有内容都搬来，导致资源占用多。</li>\n<li>太慢了。启动到进入系统，所用时间过长。</li>\n<li>步骤多。<br>\n<img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/Docker-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80-01.png\" alt=\"Docker-学习-基础-01.png\"></li>\n</ol>\n<blockquote>\n<p>容器</p>\n</blockquote>\n<ul>\n<li>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</li>\n<li><mark>容器内的应用进程直接运行于宿主的内核</mark>，容器内没有自己的内核且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</li>\n<li><mark>每个容器之间互相隔离，每个容器有自己的文件系统，容器之间进程不会相互影响，能区分计算资源</mark>。</li>\n</ul>\n<p>由于前面虚拟机存在某些缺点，Linux 发展出了另一种虚拟化技术：</p>\n<p>Linux 容器（Linux Containers，缩写为 LXC）</p>\n<p>Linux 容器是与系统其他部分隔离开的一系列进程，从另一个镜像运行，并由<mark>该镜像提供支持进程所需的全部文件</mark>。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有<mark>可移植性和一致性</mark>。</p>\n<p><mark>Linux 容器不是模拟一个完整的操作系统</mark>而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。<mark>容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置</mark>。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。</p>\n<p><img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/Docker.png\" alt=\"\"></p>\n<h2 id=\"docker网站\"><a class=\"markdownIt-Anchor\" href=\"#docker网站\">#</a> Docker 网站</h2>\n<ul>\n<li>Docker 官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS8=\">https://www.docker.com/</span></li>\n<li>Docker 镜像文件的官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\">https://hub.docker.com/</span></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/11/5d31ddd2499b.html",
            "url": "http://example.com/2023/11/5d31ddd2499b.html",
            "title": "Explain查询优化",
            "date_published": "2023-11-07T12:52:02.000Z",
            "content_html": "<h1 id=\"explain\"><a class=\"markdownIt-Anchor\" href=\"#explain\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL3VzaW5nLWV4cGxhaW4uaHRtbA==\">Explain</span> 简介</h1>\n<p>Explain 语句提供了有关<mark> Mysql 语句如何执行的信息</mark></p>\n<ul>\n<li>Explain 适用于 select、update、insert、delete 语句。</li>\n<li>Explain 和可适用的语句一起执行时，MySQL 会展示可适用语句的执行计划的信息。也就是 MySQL 解释了它将<mark>如何处理该语句</mark>，包括有关<mark>表如何连接以及连接顺序的信息</mark>。\n<ul>\n<li>示例：```explain select * from  users;</li>\n</ul>\n</li>\n<li>当与可解释语句一起 Explain 使用 时，它显示在指定连接中执行的语句的执行计划</li>\n</ul>\n",
            "tags": []
        }
    ]
}