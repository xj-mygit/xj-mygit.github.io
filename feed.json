{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/02/b30cf4c1e1ec.html",
            "url": "http://example.com/2024/02/b30cf4c1e1ec.html",
            "title": "",
            "date_published": "2024-02-22T11:16:41.471Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qYXZhZG9jLmlvL3N0YXRpYy9vcmcubW9ja2l0by9tb2NraXRvLWNvcmUvNS4xMC4wL29yZy9tb2NraXRvL01vY2tpdG8uaHRtbA==\">官网</span></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2024/01/11bdbbc2ca42.html",
            "url": "http://example.com/2024/01/11bdbbc2ca42.html",
            "title": "所多玛和蛾摩拉的毁灭",
            "date_published": "2024-01-27T02:33:45.000Z",
            "content_html": "<h1 id=\"序章\"><a class=\"markdownIt-Anchor\" href=\"#序章\">#</a> 序章</h1>\n<p>古人魏征有云：<strong>人以铜为镜，可以正衣冠。以古为镜，可以见兴替。以人为镜，可以知得失</strong>。<br>\n这段话的大致意思是：人把铜作为镜子，可以摆正自己的衣服和头冠。以历朝历代作为镜子，可以看到朝代的兴盛和更替。以人作为镜子，可以知道自己的优缺点。</p>\n<h2 id=\"正文\"><a class=\"markdownIt-Anchor\" href=\"#正文\">#</a> 正文</h2>\n<p>故事，也就是典故的意思。通俗的来说是已故的事情。这个词语它在现实生活中展现的形式有很多种，如通过电视机演绎出以电视剧，电影为载体的剧本的内容，如通过戏剧演绎出以人的台词、身体的舞动为载体的历代英杰的故事。如通过评书的方式演绎出一段段可歌可泣的往事。当然故事更多还是承载在书本上。那么今天我也将分析一段故事来让大家可以知道自己的得与失。<br>\n那么我们今天要讲的也是耳熟能详的一段故事。所多玛的蛾摩拉的毁灭。小时候我读这段故事的感触，和我今天再读感受到的东西更多了。也正应了孔子的那句话：温故而知新。所多玛和蛾摩拉的毁灭，大致的主要故事情节我们这里过一下。<br>\n亚伯拉罕的正妻撒拉无法生育，而现在她年事已高，已经到了无法生育年龄。耶和华却许诺亚伯拉罕撒拉会给他生一个儿子。同时透露出祂将要去毁灭所多玛因为那里的人恶贯满盈。亚伯拉罕向耶和华为所多玛求情。耶和华许诺亚伯拉罕如有十个义人祂不必毁灭那城。天使乔装到所多玛。罗得看见了就知道他们是祂的使者。便邀请他们进城并在那一晚维护了两位天使。第二天清晨，天使让罗得带着妻子和两个女儿出走不要回头。罗得妻子最终没忍住好奇心回头，便被变成了一根盐柱。</p>\n<h1 id=\"新生\"><a class=\"markdownIt-Anchor\" href=\"#新生\">#</a> 新生</h1>\n<p>那么我们现在来讲解下第一个阶段新生。<br>\n我们知道撒拉是亚伯拉罕的正妻。她因无法生育，就让亚伯拉罕娶了他的侍女为妾。并给他生了一个儿子叫以实玛利。撒拉则是一直到 90 岁月经停止。也没有给亚伯拉罕生育一个子女。耶和华看重亚伯拉罕。为了彰显祂的大能，以及对亚伯拉罕的看重。耶和华对亚伯拉罕如是说你明年这时候必有一个儿子。虽然在说这番话时，撒拉和亚伯拉罕均笑话耶和华。但耶和华并不怪罪他们。<br>\n那么在这里我们可以从后续也知道祂让一个 90 多岁高龄且月经已经停止的妇人怀上孕。并在后来婴儿安全降生母婴双双平安。那我们知道，从生理上来说，月经停止就已经意味着不可能再次怀孕和生育（很小概率 K：）。并且高龄妇女生产也是一个难关，</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2024/01/c5a469d6786f.html",
            "url": "http://example.com/2024/01/c5a469d6786f.html",
            "title": "社会保险（社保）",
            "date_published": "2024-01-16T13:08:00.000Z",
            "content_html": "<h1 id=\"主要包含的项目\"><a class=\"markdownIt-Anchor\" href=\"#主要包含的项目\">#</a> 主要包含的项目</h1>\n<ul>\n<li>养老保险</li>\n<li>医疗保险</li>\n<li>失业保险</li>\n<li>工伤保险</li>\n<li>生育保险</li>\n</ul>\n<h2 id=\"养老保险\"><a class=\"markdownIt-Anchor\" href=\"#养老保险\">#</a> 养老保险</h2>\n<p>达到法定退休年龄且缴纳年限 15 年及以上。可以在退休年龄每个月领取养老金。<br>\n缴费比例：看各地当年政策。</p>\n<h2 id=\"医疗保险\"><a class=\"markdownIt-Anchor\" href=\"#医疗保险\">#</a> 医疗保险</h2>\n<p>医院看病可以按照一定比例报销。<br>\n缴费比例：看各地当年政策。<br>\n<strong>城镇职工大额医疗救助费</strong>：全年 260。每个季度的首月份 21，其他月份 22。</p>\n<h2 id=\"失业保险\"><a class=\"markdownIt-Anchor\" href=\"#失业保险\">#</a> 失业保险</h2>\n<h2 id=\"工伤保险\"><a class=\"markdownIt-Anchor\" href=\"#工伤保险\">#</a> 工伤保险</h2>\n<h2 id=\"生育保险\"><a class=\"markdownIt-Anchor\" href=\"#生育保险\">#</a> 生育保险</h2>\n<h1 id=\"社保的分类\"><a class=\"markdownIt-Anchor\" href=\"#社保的分类\">#</a> 社保的分类</h1>\n<ul>\n<li>城镇职工社保</li>\n<li>城镇灵活就业职工社保</li>\n<li>城镇居民社保</li>\n<li>农村村民社保</li>\n</ul>\n<h2 id=\"城镇职工社保\"><a class=\"markdownIt-Anchor\" href=\"#城镇职工社保\">#</a> 城镇职工社保</h2>\n<p>与当地劳务公司签订劳务合同后。由劳务公司和职工共同承担保费。<br>\n具体比例看当地政策。</p>\n<h3 id=\"基本概念\"><a class=\"markdownIt-Anchor\" href=\"#基本概念\">#</a> 基本概念</h3>\n<p><strong>缴费基数</strong>：缴纳费用的标准。计算缴纳保费的基数。一般是以工资作为基数。但存在存在最低标准和最高标准。</p>\n<ul>\n<li>低于最低标准的按照最低标准作为基数。</li>\n<li>高于最高标准按照最高标准计算。</li>\n<li>缴费基数怎么算的：\n<ul>\n<li>最高标准：以当地上年度职工平均工资的 300% 为缴费基数；</li>\n<li>最低标准：以当地上一年职工平均工资的 60% 为缴费基数；<br>\n<strong> 缴费比例</strong>：缴纳保费的比例。<br>\n个人缴费公式：== 个人缴纳保费 = 缴费基数 * 个人缴费比例  + 当月大额医疗救助费 ==</li>\n</ul>\n</li>\n</ul>\n<p>下面以天津 2024 年缴费标准举例。<br>\n<strong>缴费基数</strong>：4751-23757。<br>\n<strong>缴费比例</strong>如下：<br>\n<img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/2024%E5%A4%A9%E6%B4%A5%E7%A4%BE%E4%BF%9D%E7%BC%B4%E8%B4%B9%E6%AF%94%E4%BE%8B.png\" alt=\"\"></p>\n<blockquote>\n<p>例子 1: 李华 1 月工资收入 4400，低于最低标准。生育保险取 0.2%<br>\n 当月个人缴纳保费 = 4751 * 15.5%  + 21<br>\n 当月总缴纳保费 = 4751 * 37.7% + 21</p>\n</blockquote>\n<blockquote>\n<p>例子 2: 李华 2 月工资收入 5000。位于标准中。<br>\n当月个人缴纳保费 = 5000 * 15.5% + 22<br>\n 当月总缴纳保费 = 5000 * 37.7% + 22</p>\n</blockquote>\n<blockquote>\n<p>例子 3: 李华 2 月工资收入稳定 25000，高于最高标准。<br>\n当月个人缴纳保费：25000 * 15.5% + 22<br>\n 当月总缴纳保费 = 25000 * 37.7% + 22</p>\n</blockquote>\n<h2 id=\"城镇灵活就业社保\"><a class=\"markdownIt-Anchor\" href=\"#城镇灵活就业社保\">#</a> 城镇灵活就业社保</h2>\n<p>面向于无雇工的个体经营户、无业人群、短期合同、兼职等无法和公司签订诬陷一金劳务合同的人群。<br>\n基本概念和城镇职工一样。<mark>享有和职工城镇社保一样的待遇（在医疗保险和养老保险中）</mark><br>\n<strong>险种只有养老保险和医疗保险</strong>。<br>\n个人缴费公式：== 个人缴纳保费 = 缴费基数 * 缴费比例  + 当月大额医疗救助费 ==<br>\n 以天津 2024 灵活就业比例为例：<br>\n<img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/2024%E5%A4%A9%E6%B4%A5%E7%81%B5%E6%B4%BB%E5%B0%B1%E4%B8%9A%E7%A4%BE%E4%BF%9D%E7%BC%B4%E8%B4%B9%E6%AF%94%E4%BE%8B.png\" alt=\"\"></p>\n<blockquote>\n<p>例子 1: 李华 2 月收入 4000 或者 0，低于最低标准。<br>\n个人缴纳保费：4751 * 28.5% + 22</p>\n</blockquote>\n<blockquote>\n<p>例子 2: 李华 2 月收入 100000，高于最高标准。<br>\n个人缴纳保费：23757 * 28.5% + 22</p>\n</blockquote>\n<blockquote>\n<p>例子 3: 李华 1 月收入 6000，位于中间。<br>\n个人缴纳保费：6000* 28.5% + 21</p>\n</blockquote>\n<h1 id=\"社保保费的去向\"><a class=\"markdownIt-Anchor\" href=\"#社保保费的去向\">#</a> 社保保费的去向</h1>\n<p>城镇职工社保、灵活就业社保。总缴纳保费流入分为两个账户：统筹账户和个人账户。<br>\n统筹账户：保费大部分的流向。用于发放给可以领取养老金的人以及报销医疗费用。<br>\n个人账户：保费小部分的流向。可供自己支配使用的。如医保报销。</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2024/01/e1b05e3ef41c.html",
            "url": "http://example.com/2024/01/e1b05e3ef41c.html",
            "title": "",
            "date_published": "2024-01-07T12:39:33.599Z",
            "content_html": "<h1 id=\"帮助启动类命令\"><a class=\"markdownIt-Anchor\" href=\"#帮助启动类命令\">#</a> 帮助启动类命令</h1>\n<p><mark>通过 docker --help 以及 docker 命令 --help 查看 docker 命令的使用。</mark></p>\n<ul>\n<li>启动 Docker：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<ul>\n<li>停止 Docker：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop docker</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重启 Docker</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看 Docker 状态</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status docker</span><br></pre></td></tr></table></figure>\n<ul>\n<li>开机启动 Docker</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看 Docker 概要信息</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker info</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看 Docker 总体帮助文档</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker --help</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看 Docker 命令帮助文档</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker 具体命令 --help</span><br></pre></td></tr></table></figure>\n<h1 id=\"镜像命令\"><a class=\"markdownIt-Anchor\" href=\"#镜像命令\">#</a> 镜像命令</h1>\n<h2 id=\"docker-images\"><a class=\"markdownIt-Anchor\" href=\"#docker-images\">#</a> Docker images</h2>\n<p>列出 ==<strong> 本地主机</strong> == 上的镜像。</p>\n<p>OPTIONS：</p>\n<ul>\n<li>-a：列出所有的镜像 ==（含历史镜像层）</li>\n<li>-q：只显示镜像 id</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM-4-8-centos docker]# docker images</span><br><span class=\"line\">REPOSITORY TAG IMAGE ID CREATED SIZE</span><br></pre></td></tr></table></figure>\n<p>字段说明：<br>\nREPOSITORY：镜像的仓库源<br>\n TAG：镜像的标签版本号<br>\n IMAGE ID： 镜像的 ID<br>\nCREATED： 镜像的创建时间<br>\n SIZE：镜像的大小<br>\n同一个仓库源可以有多个 TAG 版本。使用<strong> REPOSITORY:TAG</strong> 可以定义指定版本的仓库源。如<strong>不指定则默认最新</strong>。</p>\n<h2 id=\"docker-search\"><a class=\"markdownIt-Anchor\" href=\"#docker-search\">#</a> Docker search</h2>\n<p><img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/Docker-search%E5%86%85%E5%AE%B9%E7%AE%80%E4%BB%8B.png\" alt=\"\"><br>\n<img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/Docker%20search%20-%E7%A4%BA%E4%BE%8B.png\" alt=\"\"><br>\n如上图示例：第一个 mysql 的镜像是官方认证的。不支持自动构建。</p>\n<h3 id=\"option说明\"><a class=\"markdownIt-Anchor\" href=\"#option说明\">#</a> Option 说明</h3>\n<p><mark>模板</mark>： <strong>docker search option 镜像</strong><br>\n<strong>– limit</strong>：设置搜索的结果数量，默认是 25 个。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search  --limit 10 mysql</span><br></pre></td></tr></table></figure>\n<p>意思就是：查询 mysql 镜像当前页只展示 10 条记录。</p>\n<p><strong>–no-trunc</strong>: 不截断输出。因为 Description 有的会很长。所以 docker 默认缩略显示以适用于相对应的宽度。<br>\n<img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/docker-search-no-trunc%E7%A4%BA%E4%BE%8B.png\" alt=\"\"><br>\n<img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/docker-search-no-trunc%E7%A4%BA%E4%BE%8B2.png\" alt=\"\"></p>\n<p><strong>– format</strong> ：以模板的形式输出内容。<br>\n注意点：暂时只发现可以输出 name 和 desctiption</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 语句</span><br><span class=\"line\">docker search --format &quot;名称：&#123;&#123;.Name&#125;&#125;，描述：&#123;&#123;.Description&#125;&#125;&quot; nginx</span><br><span class=\"line\"># 输出结果</span><br><span class=\"line\">名 称 ： nginx 描 述 ： Official build of Nginx.</span><br></pre></td></tr></table></figure>\n<p><strong>-f ,–filter</strong>: 目前只能测试出过滤星数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#语句</span><br><span class=\"line\">docker search -f &quot;stars = 4&quot; nginx</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-pull\"><a class=\"markdownIt-Anchor\" href=\"#docker-pull\">#</a> Docker pull</h2>\n<p>下载镜像<br>\n<mark> Docker Pull 某个镜像名称  :TAG</mark></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 语句 </span><br><span class=\"line\">docker pull nginx</span><br><span class=\"line\"></span><br><span class=\"line\"># 带tag的语句</span><br><span class=\"line\">docker pull nginx:latest</span><br><span class=\"line\">docker pull nginx:1.2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>不携带版本后缀的，默认下载 latest 标签的版本。</li>\n<li><strong>latest 标签的不一定是最新版本</strong></li>\n</ul>\n<h2 id=\"docker-system-df\"><a class=\"markdownIt-Anchor\" href=\"#docker-system-df\">#</a> Docker system df</h2>\n<p>查询镜像 / 容器 / 数据卷的数量，空间等信息。df（disk file）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 语句</span><br><span class=\"line\">docker system df</span><br><span class=\"line\">展示内容</span><br><span class=\"line\">TYPE TOTAL ACTIVE SIZE RECLAIMABLE</span><br></pre></td></tr></table></figure>\n<p>TYPE：</p>\n<ul>\n<li>Images： 镜像</li>\n<li>Containers： 容器</li>\n<li>Local Volumes： 数据卷</li>\n<li>Build Cache： 缓存<br>\n TOTAL： 数量<br>\n ACTIVE： 活动中的<br>\n SIZE：大小<br>\n RECLAIMABLE： 可伸缩性。</li>\n</ul>\n<h2 id=\"docke-rmi-镜像名称id\"><a class=\"markdownIt-Anchor\" href=\"#docke-rmi-镜像名称id\">#</a> Docke rmi 镜像名称 /id</h2>\n<p>删除镜像。</p>\n<p docke=\"\" image=\"\" -qa=\"\">删除多个：docker rmi 镜像 1 镜像 2<br>\n 删除全部：docker rmi $</p>\n<p>注意：如果遇到镜像生成了容器，可以使用 -f 强制删除。force。<br>\n如 docker rmi -f 镜像 1</p>\n<h2 id=\"虚悬镜像dadangling-image\"><a class=\"markdownIt-Anchor\" href=\"#虚悬镜像dadangling-image\">#</a> 虚悬镜像（dadangling image）</h2>\n<p><mark>标签</mark>和<mark>仓库名</mark> 都是 &lt;none&gt; 的镜像。<br>\n<img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/20240305195305.png\" alt=\"\"></p>\n<h1 id=\"容器命令\"><a class=\"markdownIt-Anchor\" href=\"#容器命令\">#</a> 容器命令</h1>\n<p>镜像是容器的基础。有镜像容器才可以存在。</p>\n<h2 id=\"新建启动命令\"><a class=\"markdownIt-Anchor\" href=\"#新建启动命令\">#</a> 新建 + 启动命令</h2>\n<p>docker run   <mark>option</mark> image  <mark>command</mark> <mark>args</mark><br>\n<strong>OPTION (常用)</strong></p>\n<ul>\n<li><strong>–name = “名称”</strong>:  指定容器名称。不指定则 docker 自行分配。</li>\n<li><strong>-d</strong>: <strong>后台运行</strong>容器并返回容器 ID。即启动守护式容器（后台运行）</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d redis</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>-i</strong>: 以交互模式运行容器，通常和 - t 一起使用。</li>\n<li><strong>-t</strong>: 为容器重新分配一个伪输入终端，通常和 - i 一起使用</li>\n<li><strong>-it</strong>: 启动交互式容器（前端有伪终端，等待交互）</li>\n<li>交互式即提供一个伪终端，供于对容器内的 linux 系统做交互。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 新版本不携带/bin/bash也可以</span><br><span class=\"line\">docker run -it redis /bin/bash</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>-P</strong>:  随机端口映射，</li>\n<li><strong>-p</strong>: 指定端口映射</li>\n</ul>\n<blockquote>\n<p><mark>注意点</mark>：</p>\n<ol>\n<li>以交互模式启动容器且进入命令行界面。可能会失败。错误提示如下：<br>\ndocker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: “/bin/sh”: stat /bin/sh: no such file or directory: unknown.<br>\n 原因是你启动的镜像的基础 liunx 镜像不携带 /bin/bash 的命令。</li>\n<li>简易理解交互模式：</li>\n<li>docker 容器相当于一个 linux 系统。我们对系统中某个应用做一些处理需要使用命令行操作。继而 /bin/bash 可以提供这个平台</li>\n<li><mark>RUN 命令是将镜像生成容器</mark>。</li>\n</ol>\n</blockquote>\n<h2 id=\"列出容器\"><a class=\"markdownIt-Anchor\" href=\"#列出容器\">#</a> 列出容器</h2>\n<p><mark>Docker  ps option</mark></p>\n<ul>\n<li><strong>-a</strong> : 列出<strong>正在运行的容器</strong>，以及<strong>历史运行过的容器</strong> ==&gt; 包括被卸载过的，<strong>只要进行过 run 命令的</strong>就会出现在 - a 所列出的列表中</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-q：列出正在运行的容器。只展示容器 id。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -q</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-i: 显示最近创建的容器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -i</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-n：显示最近 n 个创建的容器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 展示最近1个创建的容器</span><br><span class=\"line\">docker ps -n1</span><br></pre></td></tr></table></figure>\n<h2 id=\"退出容器\"><a class=\"markdownIt-Anchor\" href=\"#退出容器\">#</a> 退出容器</h2>\n<p><mark>Exit/ctrl+p+q</mark></p>\n<p>Exit：直接退出容器，且容器停止。<br>\nctrl+p+q：退出容器，容器不停止。</p>\n<h2 id=\"重启启动停止强制停止容器\"><a class=\"markdownIt-Anchor\" href=\"#重启启动停止强制停止容器\">#</a> 重启，启动，停止，强制停止容器</h2>\n<p>重启：docker restart 镜像 id / 名称<br>\n启动： docker start 镜像 id / 名称<br>\n停止：docker stop 镜像 id / 名称<br>\n强制停止：docker kill 镜像 id / 名称</p>\n<p><mark>这里是对已经生成容器的容器做重启，启动等操作</mark></p>\n<h2 id=\"删除容器\"><a class=\"markdownIt-Anchor\" href=\"#删除容器\">#</a> 删除容器</h2>\n<p><mark>docker rm 镜像 id / 名称</mark><br>\n强制删除：docker rm -f 镜像 id / 名称<br>\n一次删除多个：docker rm -f ${docker ps -a -q}  或者 docker ps -a -q | xargs docker rm</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2024/01/ba3fa3c6552e.html",
            "url": "http://example.com/2024/01/ba3fa3c6552e.html",
            "title": "Cron表达式的基本使用",
            "date_published": "2024-01-02T08:20:00.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/2024/01/622f00a16f22.html",
            "url": "http://example.com/2024/01/622f00a16f22.html",
            "title": "重疾险",
            "date_published": "2024-01-02T08:20:00.000Z",
            "content_html": "<h1 id=\"笔记出处\"><a class=\"markdownIt-Anchor\" href=\"#笔记出处\">#</a> 笔记出处</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUFkNHkxejdnay8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT00YzQ4MjkwOWJmMDJjOTQ3NTBlNDkxNWI1YWZmZTA0ZA==\">B 站 Up</span><br>\n 关键概念：<strong>赔付了重疾，合同的现金价值将没有，合同是否终止看重疾赔付次数</strong>。<strong>附加险所以没必要</strong>。<br>\n购买保险 15 天内可以无理由退。</p>\n<h1 id=\"保险合同简读\"><a class=\"markdownIt-Anchor\" href=\"#保险合同简读\">#</a> 保险合同简读</h1>\n<p>保险合同：和保险公司签署的保险内容。大致分为以下内容。（加粗为重点关注对象）</p>\n<ul>\n<li><strong>保险单</strong></li>\n<li><strong>现金价值表</strong></li>\n<li><strong>投保资料</strong></li>\n<li><strong>保险条款</strong></li>\n<li>服务指南</li>\n<li>保险费收据</li>\n</ul>\n<h2 id=\"保险单\"><a class=\"markdownIt-Anchor\" href=\"#保险单\">#</a> 保险单</h2>\n<p>保险单中的一些基本信息</p>\n<ul>\n<li>保险公司的盖章：说明了合同的合法性。</li>\n<li>投保人：<strong>为这份保险付钱的人</strong>。同时拥有这份保险的所有权。</li>\n<li>被保险人：<strong>被保障的人</strong>。保险实际生效的人。保险费用根据这个人计算的。</li>\n<li>身故受益人：被保险人受了重疾去世后，保险公司的钱赔付的人。\n<ul>\n<li>一般不带。如购买了身故保险则会携带。</li>\n<li><strong>购买了最好是指定受益人</strong>。不指定默认是法定受益人。不指定的情况下会程序比较繁琐。</li>\n</ul>\n</li>\n<li>保险的险种、保额、交费年限、频率期限等信息。</li>\n</ul>\n<h2 id=\"现金价值表\"><a class=\"markdownIt-Anchor\" href=\"#现金价值表\">#</a> 现金价值表</h2>\n<p>代表这份合同的价值。值多少钱。</p>\n<ul>\n<li>合同属于投保人。投保人身故，则属于被保险人以及被保险人继承人。</li>\n<li>合同是有价值的。现金价值表列举了该合同在对应的年限所代表的价值。\n<ul>\n<li>不同年限价值不同。会在某个年限达到高峰。</li>\n</ul>\n</li>\n<li>合同也是可以用于抵押贷款。贷款上限是现金价值 80%。</li>\n</ul>\n<h2 id=\"投保资料\"><a class=\"markdownIt-Anchor\" href=\"#投保资料\">#</a> 投保资料</h2>\n<p>投保单的完整版。<br>\n注意点：需要仔细的检查投保资料，看健康告知上是否有未告知的。<br>\n<img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/%E9%87%8D%E7%96%BE%E9%99%A9%E6%8A%95%E4%BF%9D%E5%8D%95%E6%B3%A8%E6%84%8F%E7%82%B9.png\" alt=\"\"></p>\n<h2 id=\"保险条款\"><a class=\"markdownIt-Anchor\" href=\"#保险条款\">#</a> 保险条款‘</h2>\n<p>暂无说明，但仍需仔细核实。</p>\n<h1 id=\"重疾险的核心保障\"><a class=\"markdownIt-Anchor\" href=\"#重疾险的核心保障\">#</a> 重疾险的核心保障</h1>\n<p>重疾的定义是国家统一的标准。<br>\n重疾险对于这 28 种疾病是必须的保障是由 2020 年保险和医师协会共同制定的。<br>\n一下的疾病分布表可以看出 28 种疾病之外的占比很小。<br>\n故此重疾险看重的是保额。</p>\n<p><img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/%E9%87%8D%E7%96%BE%E9%99%A9%E7%96%BE%E7%97%85%E5%8E%9F%E5%9B%A0%E5%8D%A0%E6%AF%94%E8%A1%A8.png\" alt=\"\"></p>\n<h1 id=\"重疾险的设计思路和理念\"><a class=\"markdownIt-Anchor\" href=\"#重疾险的设计思路和理念\">#</a> 重疾险的设计思路和理念</h1>\n<p>前提：重疾的标准是统一的。<br>\n差异化的设计思路：分级赔付。<br>\n对于不同症状赔付的保额比例不同</p>\n<ul>\n<li>轻症 “：30% 保额</li>\n<li>中症：50-60% 保额。</li>\n<li>重症：100% 保额。<br>\n相应的重症都会有对应的轻中症。一般不需要去比较这些。</li>\n</ul>\n<h1 id=\"重疾险的三种分级方式\"><a class=\"markdownIt-Anchor\" href=\"#重疾险的三种分级方式\">#</a> 重疾险的三种分级方式</h1>\n<ul>\n<li>按时间分级\n<ul>\n<li>可能会按照时间段分级，不同年龄段赔付的保额不同。</li>\n</ul>\n</li>\n<li>按疾病严重程度分级\n<ul>\n<li>遵循重的重赔，轻的轻赔的概念。划分出更轻、更重的赔付 比例保额。</li>\n</ul>\n</li>\n<li>按次数分级\n<ul>\n<li>单种疾病多次赔。高复发种类的疾病在约定期限内复发可以多次赔付。</li>\n<li>多种疾病多次赔。不同种类的疾病可以多次赔付。\n<ul>\n<li>分组：按照某些规则被划分到同一组内的疾病只能赔付一种。\n<ul>\n<li>举例：A 组：疾病 1，疾病 2。B 组：疾病 3。在合同有效期内，得了疾病 1 赔付了疾病 1，那么即使后面得了疾病 2 那么也而无法赔付。</li>\n</ul>\n</li>\n<li>不分组：只要是不同的疾病均可以赔付。\n<ul>\n<li>举例：A 组：疾病 1，疾病 2。B 组：疾病 3。在合同有效期内，得了疾病 1 赔付了疾病 1，后面得了疾病 2 也是可以赔付的。<br>\n推荐：== 恶性肿瘤赔付（单疾病多次赔）&gt; 不分组赔付 &gt; 分组赔付 ==</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/%E9%87%8D%E7%96%BE%E9%99%A9%E7%9A%84%E5%88%86%E7%BA%A7%E6%96%B9%E5%BC%8F.png\" alt=\"\"></p>\n<h1 id=\"保障期限\"><a class=\"markdownIt-Anchor\" href=\"#保障期限\">#</a> 保障期限</h1>\n<p>合同 = 专有责任 + 保障期限。<br>\n蓝色的线：保费<br>\n橙色的线：现金价值。<br>\n定期的：都是消费型。<br>\n具体选择看自己<br>\n<img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/%E9%87%8D%E7%96%BE%E9%99%A9%E7%9A%84%E5%88%86%E7%B1%BB.png\" alt=\"\"></p>\n<h1 id=\"重疾险的多种形态\"><a class=\"markdownIt-Anchor\" href=\"#重疾险的多种形态\">#</a> 重疾险的多种形态</h1>\n<p>可以和其他保险共同组成。<br>\n终身重疾 + 终身寿险 = 储蓄型重疾险。<br>\n终身重疾 + 分红险 = 分红型重疾险。<br>\n终身重疾 + 年金险 = 返还型重疾险。</p>\n<p>汇总点：拆开往往是最优的。</p>\n<h1 id=\"选购逻辑\"><a class=\"markdownIt-Anchor\" href=\"#选购逻辑\">#</a> 选购逻辑</h1>\n<p><img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/%E9%87%8D%E7%96%BE%E9%99%A9%E9%80%89%E8%B4%AD%E9%80%BB%E8%BE%91.png\" alt=\"\"></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/12/5076ee800a47.html",
            "url": "http://example.com/2023/12/5076ee800a47.html",
            "title": "",
            "date_published": "2023-12-17T11:25:39.120Z",
            "content_html": "<h1 id=\"前提说明\"><a class=\"markdownIt-Anchor\" href=\"#前提说明\">#</a> 前提说明</h1>\n<ul>\n<li>Docker 可以在 MAC、Windows、Linux 系统上安装。</li>\n<li>Docker<mark> 不是一个通用的容器工具</mark>。<mark>依赖于 Liunx 环境</mark>。</li>\n<li>Docker 实质：在 Linux 下，制造了一个隔离的文件环境。执行效率等同于所部署的 Linux 主机。</li>\n<li>安装：具体见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZGVza3RvcC9pbnN0YWxsL21hYy1pbnN0YWxsLw==\">官网</span>\n<ul>\n<li>还可以安装一个 linux 系统的虚拟机然后安装 Docker</li>\n<li><img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/Docker-%E5%9F%BA%E7%A1%80-03.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>检查 liunx 系统内核以及系统的命令：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM-4-8-centos ~]# cat /etc/redhat-release</span><br><span class=\"line\"></span><br><span class=\"line\">CentOS Linux release 7.6.1810 (Core)</span><br><span class=\"line\"></span><br><span class=\"line\">[root@VM-4-8-centos ~]# uname -r</span><br><span class=\"line\"></span><br><span class=\"line\">3.10.0-1160.99.1.el7.x86_64</span><br></pre></td></tr></table></figure>\n<h1 id=\"基本组成-狭义镜像只说明docker\"><a class=\"markdownIt-Anchor\" href=\"#基本组成-狭义镜像只说明docker\">#</a> <strong>基本组成</strong> （狭义镜像只说明 Docker）</h1>\n<h3 id=\"镜像image\"><a class=\"markdownIt-Anchor\" href=\"#镜像image\">#</a> 镜像（image）</h3>\n<ul>\n<li>镜像通俗来说是一个<strong>只读</strong>的模板。一个镜像可以创建多个容器。</li>\n<li>镜像拥有一个完整且最小<strong> root 文件系统</strong>。例如官方的 Centos:7 则是包含了完整的一套 Centos:7 最小 root 文件系统。</li>\n<li>容器的组成部分简单概括为两部分：\n<ul>\n<li>完整且最小的 Linux 系统：提供可以运行的 Linux 环境，只加载 Linux 运行的所需部分。</li>\n<li>应用程序：需要运行的应用程序。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"容器container\"><a class=\"markdownIt-Anchor\" href=\"#容器container\">#</a> 容器（container）</h3>\n<ul>\n<li>容器是镜像内容的实现。</li>\n<li>镜像和容器就如同 Java 中的类和实例。镜像提供了所有可以用的东西。而容器则是可以实际创建出容器内的东西。</li>\n</ul>\n<h3 id=\"仓库repository\"><a class=\"markdownIt-Anchor\" href=\"#仓库repository\">#</a> 仓库（repository）</h3>\n<ul>\n<li>仓库是官方远程<strong>集中存放镜像文件</strong>的场所。</li>\n<li>类似于 Git 仓库。是由各个使用者上传到远程仓库。</li>\n<li>仓库分为<strong>公有</strong> 和<strong>私有</strong>两种类型，最大的公开仓库是 DockerHub。 国内公开仓库有阿里云、网易云等。</li>\n</ul>\n<h3 id=\"原理\"><a class=\"markdownIt-Anchor\" href=\"#原理\">#</a> 原理</h3>\n<ul>\n<li>Docker 在宿主机上会启动一个守护进程。可以通过客户端连接到宿主机对 Docker 做一系列操作。<br>\n<img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/Docker.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"架构图解\"><a class=\"markdownIt-Anchor\" href=\"#架构图解\">#</a> 架构图解</h3>\n<p><img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/Docker-%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"\"></p>\n<h1 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>Docker 的安装分为桌面版和<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZGVza3RvcC8=\">非桌面版</span>。<br>\n非桌面版具体安装：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwv\">官网</span><br>\n这两种方式均有分门别类的安装方式：如桌面版分为 windows、macos、linux；<br>\n非桌面版（引擎）：Centos、debian、fedora 等方式。具体看官网介绍。</p>\n<h2 id=\"centos\"><a class=\"markdownIt-Anchor\" href=\"#centos\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvY2VudG9zLw==\">Centos</span> 安装非桌面版（Docker 引擎）</h2>\n<h3 id=\"1-操作系统要求\"><a class=\"markdownIt-Anchor\" href=\"#1-操作系统要求\">#</a> 1. 操作系统要求</h3>\n<p>操作系统需要在 Centos7 以上。</p>\n<h3 id=\"2-卸载旧版本\"><a class=\"markdownIt-Anchor\" href=\"#2-卸载旧版本\">#</a> 2. 卸载旧版本</h3>\n<pre><code>sudo yum remove docker \\\n              docker-client \\\n              docker-client-latest \\\n              docker-common \\\n              docker-latest \\\n              docker-latest-logrotate \\\n              docker-logrotate \\\n              docker-engine\n</code></pre>\n<p>注意：<mark>卸载 Docker 时，不会删除 /var/lib/docker/ 下存储的镜像、容器、卷、网络</mark></p>\n<h3 id=\"3-安装方法\"><a class=\"markdownIt-Anchor\" href=\"#3-安装方法\">#</a> 3. 安装方法</h3>\n<p>官方提供 3 种方法：设置 Docker 存储库（推荐）、下载 RPM 包手动安装、自动化便捷脚本。这里使用第一种方法。</p>\n<h4 id=\"设置存储库\"><a class=\"markdownIt-Anchor\" href=\"#设置存储库\">#</a> 设置存储库</h4>\n<p>安装 yum-utils 软件包并设置存储库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-安装docker引擎\"><a class=\"markdownIt-Anchor\" href=\"#1-安装docker引擎\">#</a> 1. 安装 Docker 引擎</h4>\n<h5 id=\"安装docker引擎-containerd-dockercompose\"><a class=\"markdownIt-Anchor\" href=\"#安装docker引擎-containerd-dockercompose\">#</a> 安装 Docker 引擎、containerd、DockerCompose</h5>\n<p>最新版：</p>\n   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>\n<p>此命令会安装 Docker，但不会启动 Docker。它还创建一个  <code>docker</code>  组，但是默认情况下不会将任何用户添加到该组。</p>\n<p>具体版本：</p>\n<ol>\n<li>先列出<mark>符合操作系统</mark>且<mark>在存储库中可用</mark>的版本。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\"></span><br><span class=\"line\">docker-ce.x86_64    3:24.0.0-1.el8    docker-ce-stable</span><br><span class=\"line\">docker-ce.x86_64    3:23.0.6-1.el8    docker-ce-stable</span><br><span class=\"line\">&lt;...&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>选择自己需要的版本。然后通过完全限定的包名称安装特定版本。通过连字符 &quot;-&quot; 连接包名称和版本字符串。\n<ol>\n<li>包名称：docker-ce.x86_64 取 docker-ce</li>\n<li>版本字符串：3:24.0.0-1.el8</li>\n</ol>\n</li>\n<li>将步骤 2 的完全限定包名称<mark>替换</mark>掉命令行的 &lt;version_string&gt;。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>\n<p>此命令会安装 Docker，但不会启动 Docker。它还创建一个  <code>docker</code>  组，但是默认情况下不会将任何用户添加到该组。</p>\n<h4 id=\"2-启动docker\"><a class=\"markdownIt-Anchor\" href=\"#2-启动docker\">#</a> 2. 启动 Docker</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-验证是否安装成功\"><a class=\"markdownIt-Anchor\" href=\"#3-验证是否安装成功\">#</a> 3. 验证是否安装成功</h4>\n<p>此命令会下载一个 hello-world 镜像并运行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n<p>此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条确认消息并退出</p>\n<h3 id=\"卸载docker\"><a class=\"markdownIt-Anchor\" href=\"#卸载docker\">#</a> 卸载 Docker</h3>\n<ol>\n<li>卸载 Docker Engine、CLI、containerd 和 Docker Compose 软件包：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>主机上的映像、容器、卷或自定义配置文件不会自动删除。要删除所有映像、容器和卷： <figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo <span class=\"built_in\">rm</span> -rf /var/lib/docker</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo <span class=\"built_in\">rm</span> -rf /var/lib/containerd</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>您必须手动删除任何编辑的配置文件。</p>\n<h1 id=\"阿里云镜像加速\"><a class=\"markdownIt-Anchor\" href=\"#阿里云镜像加速\">#</a> 阿里云镜像加速</h1>\n<ol>\n<li>登入阿里云</li>\n<li>产品与服务中找到<strong>镜像容器服务</strong> - &gt; <strong>镜像工具</strong> - &gt; <strong>镜像加速器</strong></li>\n<li>复制加速器地址。</li>\n<li><mark>选择对应的 linux 系统</mark>在 /etc/docker/ 目录下的 daemon.json 文件中配置（下面是 centos 的）。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27; </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;registry-mirrors&quot;: [&quot;https://udxftms9.mirror.aliyuncs.com&quot;] </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">EOF </span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h1 id=\"docker-一些术语的解释\"><a class=\"markdownIt-Anchor\" href=\"#docker-一些术语的解释\">#</a> Docker 一些术语的解释</h1>\n<h2 id=\"docker桌面docker-desktop-和docker引擎docker-engine-docker-ce\"><a class=\"markdownIt-Anchor\" href=\"#docker桌面docker-desktop-和docker引擎docker-engine-docker-ce\">#</a> Docker 桌面 (Docker desktop) 和 Docker 引擎（Docker Engine、Docker ce）</h2>\n<h3 id=\"docker-桌面版\"><a class=\"markdownIt-Anchor\" href=\"#docker-桌面版\">#</a> Docker 桌面版</h3>\n<p>Docker 桌面版是适用于<strong>桌面操作系统的完整 Docker 解决方案</strong>。它提供了一个用户友好的图形界面，使得在桌面上使用 Docker 变得更加简单和直观。<mark>Docker 桌面版包括了 Docker 引擎、Docker CLI（命令行界面）和 Docker Compose 等工具，以及一些附加功能，如图形化容器管理、镜像仓库浏览器、容器日志查看器</mark>等。Docker 桌面版适用于开发人员和系统管理员，可以方便地在桌面上构建、运行和管理容器化应用程序。<br>\n<img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/Docker%E6%A1%8C%E9%9D%A2%E7%89%88%E6%8B%A5%E6%9C%89%E7%9A%84%E6%8F%92%E4%BB%B6.png\" alt=\"\"></p>\n<h3 id=\"docker引擎\"><a class=\"markdownIt-Anchor\" href=\"#docker引擎\">#</a> Docker 引擎</h3>\n<p>==Docker 引擎是 Docker 的核心组件，用于构建和运行容器化应用程序。== 它是一个轻量级的、可移植的容器运行时环境，<mark>适用于服务器和云环境</mark>。Docker 引擎提供了一组命令行工具，如 Docker CLI 和 Docker Compose，用于管理和操作容器。与 Docker 桌面版相比，Docker 引擎更加适用于服务器环境，可以通过命令行界面进行远程管理和自动化操作。</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/11/a9b903c46827.html",
            "url": "http://example.com/2023/11/a9b903c46827.html",
            "title": "基础",
            "date_published": "2023-11-14T11:57:10.000Z",
            "content_html": "<h1 id=\"docker简介\"><a class=\"markdownIt-Anchor\" href=\"#docker简介\">#</a> Docker 简介</h1>\n<h2 id=\"docker生成背景\"><a class=\"markdownIt-Anchor\" href=\"#docker生成背景\">#</a> Docker 生成背景</h2>\n<ol>\n<li>由于各种配置、开发环境的不同（例如各种版本不一致的问题，mysql、java、redis 等），导致了不同人员使用系统时的各种问题。</li>\n<li>换一台机器就要重新部署一遍，费时费力<br>\n由此衍生出 Docker —— <mark>系统平滑移植，容器虚拟化计划</mark><br>\n Docker 解决了：通过将环境复制到 Docker，解决了我的代码只能在我自己电脑上正常工作的问题。<br>\n![[image/Pasted image 20231114193806.png]]</li>\n</ol>\n<h2 id=\"docker-理念\"><a class=\"markdownIt-Anchor\" href=\"#docker-理念\">#</a> Docker 理念</h2>\n<p><mark>一次镜像，处处运行</mark><br>\n<strong> Docker 是基于 Go 语言实现的开源项目</strong><br>\n Docker 主要目标是：Build、Ship And Run Any App，Anywhere；通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的 App（可以是一个 Web 应用或者数据库应用）及其运行环境做到一次镜像，处处运行。</p>\n<p><mark>Linux 容器技术</mark>出现解决了这样一个问题，<mark>Docker 是基于此发展出来的</mark>。</p>\n<p>解决了：运行环境和配置问题的软件容器，方便做持续集成有助于整体发布的容器虚拟话技术。</p>\n<h2 id=\"容器与虚拟机的区别\"><a class=\"markdownIt-Anchor\" href=\"#容器与虚拟机的区别\">#</a> 容器与虚拟机的区别</h2>\n<ul>\n<li>虚拟机是将操作系统的所有东西全部搬过来。</li>\n<li>容器是将每一个进程所需的资源以及配置搬过来。</li>\n<li>举例：以搬家举例子：\n<ul>\n<li>虚拟机就如同是将整栋楼房都保持原样的搬过去。</li>\n<li>容器就如同是只将某样东西在新家的基础上搬过去。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>容器的发展</p>\n</blockquote>\n<p>光盘 - 卡带 - 虚拟机 - 容器</p>\n<blockquote>\n<p>虚拟机</p>\n</blockquote>\n<p>不影响宿主机的运行，而通过 == 宿主机的一个应用程序（虚拟机）== 创建出不同于宿主机的操作系统的多个实例。并在多个实例上安装部署各种应用。<br>\n<strong>缺点</strong>：</p>\n<ol>\n<li>太重了，将整套操作系统的所有内容都搬来，导致资源占用多。</li>\n<li>太慢了。启动到进入系统，所用时间过长。</li>\n<li>步骤多。<br>\n<img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/Docker-%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80-01.png\" alt=\"Docker-学习-基础-01.png\"></li>\n</ol>\n<blockquote>\n<p>容器</p>\n</blockquote>\n<ul>\n<li>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</li>\n<li><mark>容器内的应用进程直接运行于宿主的内核</mark>，容器内没有自己的内核且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</li>\n<li><mark>每个容器之间互相隔离，每个容器有自己的文件系统，容器之间进程不会相互影响，能区分计算资源</mark>。</li>\n</ul>\n<p>由于前面虚拟机存在某些缺点，Linux 发展出了另一种虚拟化技术：</p>\n<p>Linux 容器（Linux Containers，缩写为 LXC）</p>\n<p>Linux 容器是与系统其他部分隔离开的一系列进程，从另一个镜像运行，并由<mark>该镜像提供支持进程所需的全部文件</mark>。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有<mark>可移植性和一致性</mark>。</p>\n<p><mark>Linux 容器不是模拟一个完整的操作系统</mark>而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。<mark>容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置</mark>。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。</p>\n<p><img data-src=\"https://node-picture-of-typora.oss-cn-hangzhou.aliyuncs.com/image-for-typora/Docker.png\" alt=\"\"></p>\n<h2 id=\"docker网站\"><a class=\"markdownIt-Anchor\" href=\"#docker网站\">#</a> Docker 网站</h2>\n<ul>\n<li>Docker 官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS8=\">https://www.docker.com/</span></li>\n<li>Docker 镜像文件的官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\">https://hub.docker.com/</span></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/11/84e258cfff68.html",
            "url": "http://example.com/2023/11/84e258cfff68.html",
            "title": "使用索引的注意事项",
            "date_published": "2023-11-14T11:57:10.000Z",
            "content_html": "<h1 id=\"联表\"><a class=\"markdownIt-Anchor\" href=\"#联表\">#</a> 联表</h1>\n<h2 id=\"规则\"><a class=\"markdownIt-Anchor\" href=\"#规则\">#</a> 规则</h2>\n<ol>\n<li>关联字段需要加索引。</li>\n<li>关联的字段需要保证 ** 校对规则 (collation)、类型、长度保持一致。</li>\n</ol>\n<h2 id=\"遇到过的问题\"><a class=\"markdownIt-Anchor\" href=\"#遇到过的问题\">#</a> 遇到过的问题</h2>\n<blockquote>\n<ol>\n<li>联表的关联字段都加了索引，但是 explain 发现并没有使用索引<br>\n解决：不符合规则 2。</li>\n</ol>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/11/d4b98fbed4f8.html",
            "url": "http://example.com/2023/11/d4b98fbed4f8.html",
            "title": "hello-world",
            "date_published": "2023-11-07T12:52:02.000Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/11/5d31ddd2499b.html",
            "url": "http://example.com/2023/11/5d31ddd2499b.html",
            "title": "Explain查询优化",
            "date_published": "2023-11-07T12:52:02.000Z",
            "content_html": "<h1 id=\"explain\"><a class=\"markdownIt-Anchor\" href=\"#explain\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL3VzaW5nLWV4cGxhaW4uaHRtbA==\">Explain</span> 简介</h1>\n<p>Explain 语句提供了有关<mark> Mysql 语句如何执行的信息</mark></p>\n<ul>\n<li>Explain 适用于 select、update、insert、delete 语句。</li>\n<li>Explain 和可适用的语句一起执行时，MySQL 会展示可适用语句的执行计划的信息。也就是 MySQL 解释了它将<mark>如何处理该语句</mark>，包括有关<mark>表如何连接以及连接顺序的信息</mark>。\n<ul>\n<li>示例：```explain select * from  users;</li>\n</ul>\n</li>\n<li>当与可解释语句一起 Explain 使用 时，它显示在指定连接中执行的语句的执行计划</li>\n</ul>\n",
            "tags": []
        }
    ]
}